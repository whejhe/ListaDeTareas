import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TextInput, FlatList, TouchableOpacity, Pressable, Button, Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { DatePickerModal, TimePickerModal } from 'react-native-paper-dates';
import { Provider as PaperProvider } from 'react-native-paper';
import 'react-native-paper-dates/locale/es';

export default function App() {
  const [tarea, setTarea] = useState('');
  const [tareas, setTareas] = useState([]);
  const [fecha, setFecha] = useState(null);
  const [hora, setHora] = useState(null);
  const [mostrarFechaModal, setMostrarFechaModal] = useState(false);
  const [mostrarHoraModal, setMostrarHoraModal] = useState(false);

  useEffect(() => {
    const obtenerTareas = async () => {
      const tareasAlmacenadas = await cargarTareas();
      if (tareasAlmacenadas) {
        setTareas(tareasAlmacenadas);
      }
    };
    obtenerTareas();
  }, []);

  const añadirtarea = () => {
    if (tarea.length > 0 && fecha && hora) {
      const nuevasTareas = [...tareas, { 
        key: Math.random().toString(), 
        text: tarea, 
        completed: false, 
        fecha: fecha.toLocaleDateString(), 
        hora: `${hora.hours}:${hora.minutes}`
      }];
      setTareas(nuevasTareas);
      setTarea(''); // Limpia el input después de añadir una nueva tarea
      setFecha(null);
      setHora(null);
      guardarTareas(nuevasTareas);
    }
  };

  const completarTarea = (id) => {
    const nuevasTareas = tareas.map((item) => item.key === id ? { ...item, completed: !item.completed } : item);
    setTareas(nuevasTareas);
    guardarTareas(nuevasTareas);
  };

  const eliminarTarea = (id) => {
    const nuevasTareas = tareas.filter((item) => item.key !== id);
    setTareas(nuevasTareas);
    guardarTareas(nuevasTareas);
  };

  const guardarTareas = async (tareas) => {
    try {
      const jsonValue = JSON.stringify(tareas);
      await AsyncStorage.setItem('@tareas', jsonValue);
    } catch (e) {
      console.error("Error al guardar las tareas", e);
    }
  };

  const cargarTareas = async () => {
    try {
      const jsonValue = await AsyncStorage.getItem('@tareas');
      return jsonValue != null ? JSON.parse(jsonValue) : [];
    } catch (e) {
      console.error("Error al cargar las tareas", e);
    }
  };

  return (
    <PaperProvider>
      <View style={styles.container}>
        <Text style={styles.title}>Lista de Tareas</Text>
        
        <TextInput
          style={styles.input}
          placeholder="Escribe una tarea"
          onChangeText={setTarea}
          value={tarea}
        />

        <Button title="Seleccionar Fecha" onPress={() => setMostrarFechaModal(true)} />
        <Button title="Seleccionar Hora" onPress={() => setMostrarHoraModal(true)} />

        {/* Modal para seleccionar fecha */}
        <DatePickerModal
          visible={mostrarFechaModal}
          mode="single"
          onDismiss={() => setMostrarFechaModal(false)}
          date={fecha}
          onConfirm={(params) => {
            setFecha(params.date);
            setMostrarFechaModal(false);
          }}
          locale="es"
        />

        {/* Modal para seleccionar hora */}
        <TimePickerModal
          visible={mostrarHoraModal}
          onDismiss={() => setMostrarHoraModal(false)}
          onConfirm={(params) => {
            setHora(params);
            setMostrarHoraModal(false);
          }}
          hours={hora ? hora.hours : 0}
          minutes={hora ? hora.minutes : 0}
          locale="es"
        />

        <Pressable style={styles.pressable} onPress={añadirtarea}>
          <Text style={styles.pressableText}>Añadir Tarea</Text>
        </Pressable>

        <FlatList
          data={tareas}
          renderItem={({ item }) => (
            <View style={styles.tareaContainer}>
              <Text
                style={[
                  styles.tareaText,
                  { textDecorationLine: item.completed ? 'line-through' : 'none' },
                ]}
              >
                {item.text}
              </Text>
              <Text style={styles.fechaHoraText}>
                {item.fecha} - {item.hora}
              </Text>
              <View style={styles.actions}>
                <TouchableOpacity onPress={() => completarTarea(item.key)}>
                  <Text style={styles.completeButton}>
                    {item.completed ? 'Desmarcar' : 'Completar'}
                  </Text>
                </TouchableOpacity>
                <TouchableOpacity onPress={() => eliminarTarea(item.key)}>
                  <Text style={styles.deleteButton}>Eliminar</Text>
                </TouchableOpacity>
              </View>
            </View>
          )}
        />
      </View>
    </PaperProvider>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 50,
    paddingHorizontal: 20,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    padding: 10,
    borderColor: '#ccc',
    borderWidth: 1,
    marginBottom: 10,
    borderRadius: 5,
  },
  tareaContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 10,
    borderBottomWidth: 1,
    borderColor: '#ccc',
  },
  tareaText: {
    fontSize: 18,
  },
  fechaHoraText: {
    fontSize: 14,
    color: '#666',
  },
  actions: {
    flexDirection: 'row',
  },
  completeButton: {
    marginRight: 10,
    color: 'green',
  },
  deleteButton: {
    color: 'red',
  },
  pressable: {
    backgroundColor: '#007BFF',
    padding: 10,
    borderRadius: 5,
    marginTop: 10,
  },
  pressableText: {
    color: '#fff',
    textAlign: 'center',
    fontWeight: 'bold',
  },
});
